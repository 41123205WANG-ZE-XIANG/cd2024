var tipuesearch = {"pages": [{'title': 'About', 'text': '期中影片 \n 自評:65 \n \n 網頁:  https://41123205wang-ze-xiang.github.io/cd2024/ \n 網誌:\xa0 https://41123205wang-ze-xiang.github.io/cd2024/blog \n 簡報:\xa0 https://41123205wang-ze-xiang.github.io/cd2024/reveal \n 倉儲:  https://github.com/41123205WANG-ZE-XIANG/cd2024 \n', 'tags': '', 'url': 'About.html'}, {'title': 'W12', 'text': '足球機器人網際模擬 \n \n 在可攜程式系統安裝所需的 Python 模組: pip install pyzmq cbor keyboard \n 在近端電腦上取下倉儲內容: git clone https://github.com/mdecd2023/2a3-pj3ag4 \n 球場、球員、數位計分器與類比計分器場景, 以及機器人球員控制程式位於: 2a3-pj3ag4\\downloads\\zmq_football 目錄 \n 利用 \xa0 CoppeliaSim 4.5.1 rev1 for IPv6.7z \xa0 開啟 zmq_football 目錄中的 site.ttt \n 利用可攜程式系統中的 SciTE 編輯器開啟 zmq_football 目錄中的 judge.py, 按下 Tools - Go 之後, CoppeliaSim 中的足球場景將開始進行模擬, 足球從球場正中央拋下, 兩隊球員完成列隊, 準備接受遠端 ZMQ RemoteAPI Python 程式操控, 以便進行球賽競技. \n 模擬影片: 足球.mkv \n \n', 'tags': '', 'url': 'W12.html'}, {'title': 'W10', 'text': '任務一: \n 建立班上學員的倉儲、網站與分組連結 \n 任務二: \n 請下載\xa0 cd2024_ball_balancing_platform_control_ref.7z , 閱讀後請將摘要內容放入個人與分組網誌中. \n 各篇論文要點摘要： \n 文章一：球體平衡平台的構建與理論研究 \n \n 問題：  控制理論在穩定動態系統時的局限性 \n 解決方案：  構建球體平衡平台並與理論模型進行比較 \n 結論：  線性控制可以實現良好的性能，但存在靜態誤差。理論與實際結果的差異主要來自於物理模型的誤差和電子元件的非理想特性。穩定動態系統的性能受限於狀態調整的靈活性、控制器設計和輸入數據的準確性。 \n \n 文章二：基於FPGA並行實現的球體平衡平台實時控制系統 \n \n 問題：  提高球體位置控制精度 \n 解決方案：  使用PID控制器和FPGA並行計算 \n 結論：  PID控制器與FPGA並行計算可以有效提高球體位置控制精度。該方案可應用於控制具有多個參數的高速物件。 \n \n 文章三：基於狀態空間方法的雙軸平台球體位置控制的模擬與實驗研究 \n \n 問題：  穩定控制球體位置和軌跡追踪 \n 解決方案：  設計並比較三種控制結構：PD控制器、狀態空間反饋和帶狀態空間回饋的狀態空間觀測器 \n 結論：  三種控制結構均能實現穩定控制，但狀態空間觀測器具有最佳性能。該研究建立了一個教育平台，用於向非技術人員解釋基本控制系統原理。 \n \n 文章四：面向控制理論課程的球體平衡系統設計與實現 \n \n 問題：  低成本的教育工具，用於教授控制理論應用 \n 解決方案：  開發使用微控制器和控制算法的球體平衡系統 \n 結論：  球體平衡系統是一種低成本的教育工具，可用於教授控制理論應用。該系統允許學生將理論知識應用於實踐中，並了解閉環回饋系統和PID算法的原理。 \n \n 文章五：基於平板的球體平衡控制系統 \n \n 問題：  成本效益高且易於控制的球體平衡平台 \n 解決方案：  設計使用AVR微控制器的雙環下屬控制系統，使用PID控制器維持球體平衡 \n 結論：  該系統使用步進電機替代伺服電機，並無需外部電腦進行圖像處理，具有成本效益和易於控制的優勢。未來計劃改進球體位置回饋信號的濾波，以提高控制系統的速度和品質。 \n \n 文章六：使用QUARC進行二維球體平衡器控制 \n \n 問題：  測試和驗證球體平衡控制算法的實驗平台 \n 解決方案：  使用QUARC軟體設計和實現二維平台上的球體位置控制 \n 結論：  PD和PID控制器均能實現球體位置控制，但PID控制器在跟踪斜坡和正弦參考信號時具有更好的性能。該實驗涵蓋了建模、控制器設計、模擬和實施等多個控制系統的關鍵步驟，為學生提供了寶貴的學習經驗。 \n \n 任務三 : \n 鋼球平衡台 PID 控制與模擬 \n 零件二: 零件檔 ， 過程檔 \n 組\xa0 裝: 零件檔 \n', 'tags': '', 'url': 'W10.html'}, {'title': 'W8', 'text': '鋼球平衡台 PID 控制與模擬 \n \n 對 Gemini 1.5 Pro 提問: \n 以下為利用 PID 控制 CoppeliaSim \xa0 鋼球平衡台場景 的 ZMQ RemoteAPI Python 程式, 請利用 Python 模組將系統控制過程, 鋼球在平衡台上的 x 方向座標與 y 方向, 利用 matplotlib 畫出來. "這裡附上原本的 PID 控制程式碼" \n Gemini 1.5 Pro 回答: \n Python \n \n import zmq\nimport time\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# ZMQ 連接設定\ncontext = zmq.Context()\nsocket = context.socket(zmq.REQ)\nsocket.connect("tcp://127.0.0.1:5555")\n\n# PID 控制參數\nKp = 0.5\nKi = 0.1\nKd = 0.01\n\n# 參考資料\nreference_x = 0.0\nreference_y = 0.0\n\n# 實際狀態\nx = 0.0\ny = 0.0\n\n# 誤差\nerror_x = 0.0\nerror_y = 0.0\n\n# 累積誤差\nintegral_error_x = 0.0\nintegral_error_y = 0.0\n\n# 導數誤差\nderivative_error_x = 0.0\nderivative_error_y = 0.0\n\n# 控制訊號\ncontrol_signal_x = 0.0\ncontrol_signal_y = 0.0\n\n# 時間軸\ntime_axis = []\n\n# x 方向座標\nx_axis = []\n\n# y 方向座標\ny_axis = []\n\n# 模擬時間\nsimulation_time = 10.0\n\n# 模擬步長\nsimulation_step = 0.01\n\n# 開始模擬\nstart_time = time.time()\n\nwhile time.time() < start_time + simulation_time:\n # 讀取實際狀態\n request = "get state"\n socket.send_string(request)\n response = socket.recv_string()\n state = eval(response)\n x = state["x"]\n y = state["y"]\n \n # 計算誤差\n error_x = reference_x - x\n error_y = reference_y - y\n\n # 累積誤差\n integral_error_x += error_x * simulation_step\n integral_error_y += error_y * simulation_step\n\n # 導數誤差\n derivative_error_x = (x - previous_x) / simulation_step\n derivative_error_y = (y - previous_y) / simulation_step\n\n # 更新控制訊號\n control_signal_x = Kp * error_x + Ki * integral_error_x + Kd * derivative_error_x\n control_signal_y = Kp * error_y + Ki * integral_error_y + Kd * derivative_error_y\n\n # 限制控制訊號\n control_signal_x = max(-10.0, min(10.0, control_signal_x))\n control_signal_y = max(-10.0, min(10.0, control_signal_y))\n\n # 送出控制訊號\n request = "set force"\n data = {"force_x": control_signal_x, "force_y": control_signal_y}\n socket.send_string(request)\n socket.send_string(str(data))\n\n # 記錄數據\n time_axis.append(time.time() - start_time)\n x_axis.append(x)\n y_axis.append(y)\n\n # 更新狀態\n previous_x = x\n previous_y = y\n\n # 延遲模擬步長\n time.sleep(simulation_step)\n\n# 關閉 ZMQ 連接\nsocket.close()\n\n# 繪製圖表\nplt.figure(figsize=(10, 6))\nplt.subplot(2, 1, 1)\nplt.plot(time_axis, x_axis, label="x")\nplt.plot(time_axis, reference_x * np.ones_like(time_axis), label="reference_x")\nplt.xlabel("Time (s)")\nplt.ylabel("Position (m)")\nplt.legend()\nplt.subplot(2, 1, 2)\nplt.plot(time_axis, y_axis, label="y")\nplt.plot(time_axis, reference_y * np.ones_like(time_axis), label="reference_y")\nplt.xlabel("Time (s)")\nplt.ylabel("Position (m)")\nplt.legend()\nplt.tight_layout()\nplt.show()  \n \n \n', 'tags': '', 'url': 'W8.html'}, {'title': 'W5分組任務', 'text': '41123205 \n 自評分數:65 \n 1.建立個人課程倉儲與網站 \n \n 建立個人課程倉儲與網站影片之逐字稿 \n 摘要:先進入mde.te網站的CD2024 >> 利用team code(p0961sy)加入teams團隊 >> 先登入github>>再利用https://github.com/mdecycu/cmsimde_site此連結進到cd2024的倉儲template來create一個新的倉儲 >> 名稱打cd2024 >> 按create >> 點settings >> 點pages >> 將none改為main >> 點save \n 心得:這部影片裡的內容應該是淺顯易懂的，所以應該很容易就做出來了。 \n \n 13.利用 Gitpod 與個人 token 取得分組倉儲改版權限 \n \n 利用 Gitpod 與個人 token 取得分組倉儲改版權限影片之逐字稿 \n 摘要:先到gitpod >> 將token存在TERMINAL之下 >> 打cd .git和cat config >> 要編輯要先更換目錄到git之下 >> Vi config >> 是利用KJHL控制程式編碼位置 >> 不須使用後要到gitpod關掉才不會浪費時數 \n 心得:gitpod這裡我看了很久但還是不知道怎麼進去的，之後再去詢問同學了。 \n', 'tags': '', 'url': 'W5分組任務.html'}, {'title': '翻譯作業', 'text': '各組學員依照組長分配之頁數翻譯 tesi 檔案 \n 我是負責 P65-P75 \n 整份報告翻譯統整 \n', 'tags': '', 'url': '翻譯作業.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};
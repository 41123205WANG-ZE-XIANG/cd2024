<h1>About</h1>
<p>期中影片</p>
<p>自評:65</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/fMj0iAx46B8" width="560"></iframe></p>
<p>網頁: <span style="color: #0000ff;"><a href="https://41123205wang-ze-xiang.github.io/cd2024/" style="color: #0000ff;">https://41123205wang-ze-xiang.github.io/cd2024/</a></span></p>
<p>網誌: <span style="color: #0000ff;"><a href="https://41123205wang-ze-xiang.github.io/cd2024/blog" style="color: #0000ff;">https://41123205wang-ze-xiang.github.io/cd2024/blog</a></span></p>
<p>簡報: <span style="color: #0000ff;"><a href="https://41123205wang-ze-xiang.github.io/cd2024/reveal" style="color: #0000ff;">https://41123205wang-ze-xiang.github.io/cd2024/reveal</a></span></p>
<p>倉儲: <span style="color: #0000ff;"><a href="https://github.com/41123205WANG-ZE-XIANG/cd2024" style="color: #0000ff;">https://github.com/41123205WANG-ZE-XIANG/cd2024</a></span></p>
<h1><span style="color: #000000;">W12</span></h1>
<h1 id="robot">足球機器人網際場景模擬</h1>
<ol>
<li>在可攜程式系統安裝所需的 Python 模組: pip install pyzmq cbor keyboard</li>
<li>在近端電腦上取下倉儲內容: git clone https://github.com/mdecd2023/2a3-pj3ag4</li>
<li>球場、球員、數位計分器與類比計分器場景, 以及機器人球員控制程式位於: 2a3-pj3ag4\downloads\zmq_football 目錄</li>
<li>利用<span> </span><a href="http://229.cycu.org/CoppeliaSimEdu_4.5.1_rev4_for_cd2023.7z">CoppeliaSim 4.5.1 rev1 for IPv6.7z</a><span> </span>開啟 zmq_football 目錄中的 site.ttt</li>
<li>利用可攜程式系統中的 SciTE 編輯器開啟 zmq_football 目錄中的 judge.py, 按下 Tools - Go 之後, CoppeliaSim 中的足球場景將開始進行模擬, 足球從球場正中央拋下, 兩隊球員完成列隊, 準備接受遠端 ZMQ RemoteAPI Python 程式操控, 以便進行球賽競技.</li>
<li>模擬影片:<a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/41123205_nfu_edu_tw/EebWHgepG5FDpc2kwfXrmTIBJlCzBW3GVipv12RTO9qnOA?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0NvcHkifX0&amp;e=twOcpI">足球.mkv</a></li>
</ol>
<h1>W10</h1>
<p>任務一:</p>
<p>建立班上學員的倉儲、網站與分組連結</p>
<p>任務二:</p>
<p><span>請下載 </span><a href="http://229.cycu.org/cd2024_ball_balancing_platform_control_ref.7z">cd2024_ball_balancing_platform_control_ref.7z</a><span>, 閱讀後請將摘要內容放入個人與分組網誌中.</span></p>
<p>各篇論文要點摘要：</p>
<p data-sourcepos="3:1-3:22"><strong>文章一：球體平衡平台的構建與理論研究</strong></p>
<ul data-sourcepos="5:1-8:0">
<li data-sourcepos="5:1-5:26"><strong>問題：</strong> 控制理論在穩定動態系統時的局限性</li>
<li data-sourcepos="6:1-6:30"><strong>解決方案：</strong> 構建球體平衡平台並與理論模型進行比較</li>
<li data-sourcepos="7:1-8:0"><strong>結論：</strong> 線性控制可以實現良好的性能，但存在靜態誤差。理論與實際結果的差異主要來自於物理模型的誤差和電子元件的非理想特性。穩定動態系統的性能受限於狀態調整的靈活性、控制器設計和輸入數據的準確性。</li>
</ul>
<p data-sourcepos="9:1-9:31"><strong>文章二：基於FPGA並行實現的球體平衡平台實時控制系統</strong></p>
<ul data-sourcepos="11:1-14:0">
<li data-sourcepos="11:1-11:20"><strong>問題：</strong> 提高球體位置控制精度</li>
<li data-sourcepos="12:1-12:29"><strong>解決方案：</strong> 使用PID控制器和FPGA並行計算</li>
<li data-sourcepos="13:1-14:0"><strong>結論：</strong> PID控制器與FPGA並行計算可以有效提高球體位置控制精度。該方案可應用於控制具有多個參數的高速物件。</li>
</ul>
<p data-sourcepos="15:1-15:35"><strong>文章三：基於狀態空間方法的雙軸平台球體位置控制的模擬與實驗研究</strong></p>
<ul data-sourcepos="17:1-20:0">
<li data-sourcepos="17:1-17:23"><strong>問題：</strong> 穩定控制球體位置和軌跡追踪</li>
<li data-sourcepos="18:1-18:52"><strong>解決方案：</strong> 設計並比較三種控制結構：PD控制器、狀態空間反饋和帶狀態空間回饋的狀態空間觀測器</li>
<li data-sourcepos="19:1-20:0"><strong>結論：</strong> 三種控制結構均能實現穩定控制，但狀態空間觀測器具有最佳性能。該研究建立了一個教育平台，用於向非技術人員解釋基本控制系統原理。</li>
</ul>
<p data-sourcepos="21:1-21:28"><strong>文章四：面向控制理論課程的球體平衡系統設計與實現</strong></p>
<ul data-sourcepos="23:1-26:0">
<li data-sourcepos="23:1-23:29"><strong>問題：</strong> 低成本的教育工具，用於教授控制理論應用</li>
<li data-sourcepos="24:1-24:32"><strong>解決方案：</strong> 開發使用微控制器和控制算法的球體平衡系統</li>
<li data-sourcepos="25:1-26:0"><strong>結論：</strong> 球體平衡系統是一種低成本的教育工具，可用於教授控制理論應用。該系統允許學生將理論知識應用於實踐中，並了解閉環回饋系統和PID算法的原理。</li>
</ul>
<p data-sourcepos="27:1-27:21"><strong>文章五：基於平板的球體平衡控制系統</strong></p>
<ul data-sourcepos="29:1-32:0">
<li data-sourcepos="29:1-29:27"><strong>問題：</strong> 成本效益高且易於控制的球體平衡平台</li>
<li data-sourcepos="30:1-30:47"><strong>解決方案：</strong> 設計使用AVR微控制器的雙環下屬控制系統，使用PID控制器維持球體平衡</li>
<li data-sourcepos="31:1-32:0"><strong>結論：</strong> 該系統使用步進電機替代伺服電機，並無需外部電腦進行圖像處理，具有成本效益和易於控制的優勢。未來計劃改進球體位置回饋信號的濾波，以提高控制系統的速度和品質。</li>
</ul>
<p data-sourcepos="33:1-33:26"><strong>文章六：使用QUARC進行二維球體平衡器控制</strong></p>
<ul data-sourcepos="35:1-38:0">
<li data-sourcepos="35:1-35:28"><strong>問題：</strong> 測試和驗證球體平衡控制算法的實驗平台</li>
<li data-sourcepos="36:1-36:38"><strong>解決方案：</strong> 使用QUARC軟體設計和實現二維平台上的球體位置控制</li>
<li data-sourcepos="37:1-38:0"><strong>結論：</strong> PD和PID控制器均能實現球體位置控制，但PID控制器在跟踪斜坡和正弦參考信號時具有更好的性能。該實驗涵蓋了建模、控制器設計、模擬和實施等多個控制系統的關鍵步驟，為學生提供了寶貴的學習經驗。</li>
</ul>
<p>任務三 :</p>
<p>鋼球平衡台 PID 控制與模擬</p>
<p>零件二:<a href="https://drive.google.com/file/d/1DmwGGZOWa9V9j4-biT4ZLUAbon_0DiEC/view?usp=drive_link">零件檔</a>，<a href="https://drive.google.com/file/d/1ZOICXm_jkRpNZD92DL3qMpA9zQIzdom5/view?usp=drive_link">過程檔</a></p>
<p>組  裝:<a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/41123205_nfu_edu_tw/Ee1RrS562YpHqErsaMQK4cUBqTKzloas-Mgd9P5plwF1VA?e=34DuqM">零件檔</a></p>
<h1>W8</h1>
<p>鋼球平衡台 PID 控制與模擬</p>
<p></p>
<p>對 Gemini 1.5 Pro 提問:</p>
<p>以下為利用 PID 控制 CoppeliaSim<span> </span><a href="http://229.cycu.org/ball_beam_balancing_PID_control_coppeliasim_1d_and_2d.7z">鋼球平衡台場景</a>的 ZMQ RemoteAPI Python 程式, 請利用 Python 模組將系統控制過程, 鋼球在平衡台上的 x 方向座標與 y 方向, 利用 matplotlib 畫出來. "這裡附上原本的 PID 控制程式碼"</p>
<p><span>Gemini 1.5 Pro</span>回答:</p>
<div _ngcontent-ng-c3669143999="" class="code-block-decoration header gmat-subtitle-1 ng-star-inserted"><span _ngcontent-ng-c3669143999="">Python</span></div>
<div _ngcontent-ng-c3669143999="" class="code-block-internal-container">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import zmq
import time
import matplotlib.pyplot as plt
import numpy as np

# ZMQ 連接設定
context = zmq.Context()
socket = context.socket(zmq.REQ)
socket.connect("tcp://127.0.0.1:5555")

# PID 控制參數
Kp = 0.5
Ki = 0.1
Kd = 0.01

# 參考資料
reference_x = 0.0
reference_y = 0.0

# 實際狀態
x = 0.0
y = 0.0

# 誤差
error_x = 0.0
error_y = 0.0

# 累積誤差
integral_error_x = 0.0
integral_error_y = 0.0

# 導數誤差
derivative_error_x = 0.0
derivative_error_y = 0.0

# 控制訊號
control_signal_x = 0.0
control_signal_y = 0.0

# 時間軸
time_axis = []

# x 方向座標
x_axis = []

# y 方向座標
y_axis = []

# 模擬時間
simulation_time = 10.0

# 模擬步長
simulation_step = 0.01

# 開始模擬
start_time = time.time()

while time.time() &lt; start_time + simulation_time:
 # 讀取實際狀態
 request = "get state"
 socket.send_string(request)
 response = socket.recv_string()
 state = eval(response)
 x = state["x"]
 y = state["y"]
 
 # 計算誤差
 error_x = reference_x - x
 error_y = reference_y - y

 # 累積誤差
 integral_error_x += error_x * simulation_step
 integral_error_y += error_y * simulation_step

 # 導數誤差
 derivative_error_x = (x - previous_x) / simulation_step
 derivative_error_y = (y - previous_y) / simulation_step

 # 更新控制訊號
 control_signal_x = Kp * error_x + Ki * integral_error_x + Kd * derivative_error_x
 control_signal_y = Kp * error_y + Ki * integral_error_y + Kd * derivative_error_y

 # 限制控制訊號
 control_signal_x = max(-10.0, min(10.0, control_signal_x))
 control_signal_y = max(-10.0, min(10.0, control_signal_y))

 # 送出控制訊號
 request = "set force"
 data = {"force_x": control_signal_x, "force_y": control_signal_y}
 socket.send_string(request)
 socket.send_string(str(data))

 # 記錄數據
 time_axis.append(time.time() - start_time)
 x_axis.append(x)
 y_axis.append(y)

 # 更新狀態
 previous_x = x
 previous_y = y

 # 延遲模擬步長
 time.sleep(simulation_step)

# 關閉 ZMQ 連接
socket.close()

# 繪製圖表
plt.figure(figsize=(10, 6))
plt.subplot(2, 1, 1)
plt.plot(time_axis, x_axis, label="x")
plt.plot(time_axis, reference_x * np.ones_like(time_axis), label="reference_x")
plt.xlabel("Time (s)")
plt.ylabel("Position (m)")
plt.legend()
plt.subplot(2, 1, 2)
plt.plot(time_axis, y_axis, label="y")
plt.plot(time_axis, reference_y * np.ones_like(time_axis), label="reference_y")
plt.xlabel("Time (s)")
plt.ylabel("Position (m)")
plt.legend()
plt.tight_layout()
plt.show() </pre>
<pre _ngcontent-ng-c3669143999=""><br/><br/></pre>
</div>
<h1>W5分組任務</h1>
<p>41123205</p>
<p><span>自評分數:65</span></p>
<p><span>1.建立個人課程倉儲與網站</span></p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="https://www.youtube.com/embed/kIXD6Ygjxvo" width="560"></iframe></p>
<p><span><a href="https://mdecd2024.github.io/2b-midbg7/downloads/%E5%BD%B1%E7%89%871%E7%BF%BB%E8%AD%AF.txt">建立個人課程倉儲與網站影片之逐字稿</a></span></p>
<p>摘要:先進入mde.te網站的CD2024 &gt;&gt; 利用team code(p0961sy)加入teams團隊 &gt;&gt; 先登入github&gt;&gt;再利用https://github.com/mdecycu/cmsimde_site此連結進到cd2024的倉儲template來create一個新的倉儲<br/>&gt;&gt; 名稱打cd2024 &gt;&gt; 按create &gt;&gt; 點settings &gt;&gt; 點pages &gt;&gt; 將none改為main &gt;&gt; 點save</p>
<p>心得:這部影片裡的內容應該是淺顯易懂的，所以應該很容易就做出來了。</p>
<p></p>
<p><span>13.利用 Gitpod 與個人 token 取得分組倉儲改版權限</span></p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="https://www.youtube.com/embed/gDs7LZ0A47o" width="560"></iframe></p>
<p><span><a href="https://mdecd2024.github.io/2b-midbg7/downloads/%E5%BD%B1%E7%89%8713%E7%BF%BB%E8%AD%AF.txt">利用 Gitpod 與個人 token 取得分組倉儲改版權限影片之逐字稿</a></span></p>
<p>摘要:先到gitpod &gt;&gt; 將token存在TERMINAL之下 &gt;&gt; 打cd .git和cat config &gt;&gt; 要編輯要先更換目錄到git之下 &gt;&gt; Vi config &gt;&gt; 是利用KJHL控制程式編碼位置 &gt;&gt; 不須使用後要到gitpod關掉才不會浪費時數</p>
<p>心得:gitpod這裡我看了很久但還是不知道怎麼進去的，之後再去詢問同學了。</p>
<h1>翻譯作業</h1>
<p><span style="color: #000000;">各組學員依照組長分配之頁數翻譯<a href="/downloads/tesi.pdf">tesi</a>檔案</span></p>
<p>我是負責<a href="/downloads/P65-75.pdf">P65-P75</a></p>
<p><a href="/downloads/odoo統整.pdf">整份報告翻譯統整</a></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>